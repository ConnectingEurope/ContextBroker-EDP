[main]
# How the URI for the metadata will be formed
# {host} field indicates where the uri.host var of this config file will be set and must be present
# For example, for uri.host value 'europeandataportal.eu', the URI will be like:
#   http://europeandataportal.eu/cb/dataset/
uri.structure = http://{host}/cb/

# {host} value for uri.structure field (can include a port)
# uri.host =
uri.host =
# URL where solution's API is deployed (without final slash)
# It must contain the host (IP or DNS) and the relative path where the API was deployed in NGINX
#	e.g. http://www.europeandataportal.eu/context-data/api or http://217.172.12.169/api
integration.api =
# URL where Orion is deployed (without final slash)
integration.orion =

[catalogue]
# Datasets catalogue title (mandatory)
title =
# Datasets catalogue description (mandatory)
description =
# URI of catalogue's publisher (mandatory)
# It must be the same used in other applications or previous harvestings in the EDP
# It is important to keep same URIs to link context data with other information already published in the EDP
publisher-uri =
# Name of catalogue's publisher (mandatory)
publisher-name =
# URL to catalogue's publisher homepage
publisher-homepage =
# Publisher classification (unique value)
# These types are the ones defined by DCAT-AP
# Possible values:
#   academia_scientific_org company industry_consortium local_authority
#   national_authority nongovernmental_org nonprofit_org private_individual
#   regional_authority standardisation_body supranational_authority
publisher-type =
# URL where the catalogue is located
homepage =

[datamodel.template]
# Type name of the Data Model/entity (mandatory)
datamodel.type =
# The service where these entities are grouped
datamodel.service =
# The path where the entities are located inside the service specified
datamodel.service-path =
# The dataset title must be in English (mandatory)
dataset.title =
# The dataset description must be in English (mandatory)
# If the description is multi-lined you must write it between ''' at phrase start and end
dataset.description =
# Publisher contact email
dataset.contact-point =
# Keywords (tags) of related subjects lower case recommended (percent sign separated)
dataset.keywords =
# URI of dataset's publisher
# It must be the same used in other applications or previous harvestings in the EDP
# It is important to keep same URIs to link context data with other information already published in the EDP
dataset.publisher-uri =
# Name of dataset's publisher
dataset.publisher-name =
# Publisher classification (unique value)
# These types are the ones defined by DCAT-AP
# Possible values:
#   academia_scientific_org company industry_consortium local_authority
#   national_authority nongovernmental_org nonprofit_org private_individual
#   regional_authority standardisation_body supranational_authority
dataset.publisher-type =
# URL to the catalogue publisher's homepage
dataset.publisher-homepage =
# Themes that apply to this dataset's Data Model (separated by blank)
# These themes are the ones defined by DCAT-AP
# Possible values:
#   agriculture education environment energy transport technology economy
#   social health government regions justice international provisional
dataset.themes =
# Rights applicable for dataset accessing (unique value)
# These types are the ones defined by DCAT-AP
# Possible values:
#   public restricted non_public provisional
dataset.access-rights =
# Periodicity within the data from the CB is updated that apply to this dataset's Data Model (unique value)
# These frequencies are the ones defined by DCAT-AP
# Possible values:
#   triennial biennial annual semiannual three_times_year quarterly bimonthly
#   monthly semimonthly biweekly three_times_month weekly semiweekly three_times_week
#   daily continuously irregular unknown other twice_day continuous never quadrennial
#   quinquennial hourly decennial provisional
dataset.periodicity =
# A JSON file containing the polygon info of the area covered by the dataset
# It must be an absolute path to the file
# The JSON file can be obtained from:
#   http://geojson.io
dataset.spatial =
# A webpage that provides access to the dataset, its distributions and/or additional information
dataset.landing-page =
# Possible distribution values:
# 	location and category (only if you do not specify a global Data Model -e.g. WeatherForecast instead of Weather)
dataset.allocation =
# Values for the location distribution (percent sign separated)
# The values set here should appear as address metadata in CBs data
distribution.locations =
# URL to distributions license information
# 	e.g. http://creativecommons.org/licenses/by/4.0/
distribution.license =
